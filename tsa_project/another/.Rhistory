gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
# myTS.multiple = decompose(myTS, type = "multiplicative")
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
#res = myTS.additive$random
dtemp = diff(myTS.adjusted)
adf.test(dtemp)
auto.arima(dtemp)
arma21.dtemp = arima(dtemp, c(2, 0, 1))
arma24.dtemp = arima(dtemp, c(2, 0, 4))
auto.arima(arma21.dtemp$residuals)
auto.arima(arma24.dtemp$residuals)
my.arma = arma24.dtemp
my.arma
res = my.arma$residuals
Box.test(res, type = 'Ljung-Box')
arch.test(my.arma)
fit1 = my_sGARCH_test(1, 1, 2, 4, dtemp)
z = residuals(fit) / sigma(fit)
plot.ts(z)
mean(z)
var(z)
length(z)
plot.ts(rnorm(2003, 0.0289858, 1.012043))
plot(fit1)
acf(z)
library(fracdiff)
d1 = fdGPH(z)
d1
z1 = diffseries(z, d1$d)
acf(z1)
fdGPH(z1)
acf(z1, -0.2167174)
acf(diffseries(z1, -0.2167174))
acf(z)
acf(diffseries(z1, -0.2167174))
acf(z)
z
z = as.numeric(residuals(fit) / sigma(fit))
z
z - fit@fit$z
c
acf(z)
acf(z2)
acf(z1)
acf(z)
acf(z1)
acf(z)
auto.arima(z1)
z = as.numeric(residuals(fit) / sigma(fit))
d1 = fdGPH(z)
z1 = diffseries(z, d1$d)
auto.arima(z1)
zarma = arima(z1, c(1, 0, 5))
res4 = zarma$residuals
acf(res4)
my_sGARCH_test(1, 1, 0, 0, res4)
model4 = my_sGARCH_test(1, 1, 0, 0, res4)
z4 = model4@fit$z
acf(z4)
plot(model4)
pacf(z)
auto.arima(z)
memory.long <- fracdiff.sim(80, d = 0.3)
mGPH <- fdGPH(memory.long$series)
acf(mGPH)
mGPH
r <- diffseries(memory.long$series, d = mGPH$d)
acf(r)
acf(memory.long$series)
acf(r)
memory.long <- fracdiff.sim(1500, d = 0.3)
fdGPH(memory.long$series)
memory.long <- fracdiff.sim(1500, d = 0.3)
fdGPH(memory.long$series)
memory.long <- fracdiff.sim(1500, d = 0.3)
fdGPH(memory.long$series)
memory.long <- fracdiff.sim(1500, d = 0.3)
fdGPH(memory.long$series)
memory.long <- fracdiff.sim(1500, d = 0.3)
fdGPH(memory.long$series)
memory.long <- fracdiff.sim(1500, d = 0.3)
spm <- fdSperio(memory.long$series)
str(spm, digits=6)
memory.long <- fracdiff.sim(1500, d = 0.3)
spm <- fdSperio(memory.long$series)
str(spm, digits=6)
memory.long <- fracdiff.sim(1500, d = 0.3)
spm <- fdSperio(memory.long$series)
str(spm, digits=6)
memory.long <- fracdiff.sim(1500, d = 0.3)
spm <- fdSperio(memory.long$series)
str(spm, digits=6)
memory.long <- fracdiff.sim(1500, d = 0.3)
spm <- fdSperio(memory.long$series)
str(spm, digits=6)
memory.long <- fracdiff.sim(1500, d = 0.3)
spm <- fdSperio(memory.long$series)
str(spm, digits=6)
fracdiff(z)
fracdiff(z)
summary(d)
acf(z)
install.packages('mgcv')
install.packages("mgcv")
names(gtemp) <- c("Year", "Temperature")
library("curl")
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.4.0.0.annual_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf, colClasses = rep("numeric", 12))[, 1:2] # only want some of the variables
names(gtemp) <- c("Year", "Temperature")
gtemp <- head(gtemp, -1)                # -1 drops the last row
gtemp
library("ggplot2")
theme_set(theme_bw())
p1 <- ggplot(gtemp, aes(x = Year, y = Temperature)) +
geom_point()
p1 + geom_line()
forecast(fit1)
library("curl")
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.annual_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf, colClasses = rep("numeric", 12))[, 1:2] # only want some of the variables
names(gtemp) <- c("Year", "Temperature")
library("ggplot2")
theme_set(theme_bw())
p1 <- ggplot(gtemp, aes(x = Year, y = Temperature)) +
geom_point()
p1 + geom_line()
library("mgcv")
m1 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 1))
m2 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 2))
anova(m1$lme, m2$lme)
ACF <- acf(resid(m1$lme, type = "normalized"), plot = FALSE)
ACF <- setNames(data.frame(unclass(ACF)[c("acf", "lag")]), c("ACF","Lag"))
ggplot(ACF, aes(x = Lag, y = ACF)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = Lag, yend = 0))
tmpf <- tempfile()
source("script.r")
setwd('~/GIT/maths/tsa_project/another/')
source("script.r")
library("curl")
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.annual_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf, colClasses = rep("numeric", 12))[, 1:2] # only want some of the variables
names(gtemp) <- c("Year", "Temperature")
library("ggplot2")
theme_set(theme_bw())
p1 <- ggplot(gtemp, aes(x = Year, y = Temperature)) +
geom_point()
p1 + geom_line()
library("mgcv")
m1 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 1))
m2 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 2))
anova(m1$lme, m2$lme)
ACF <- acf(resid(m1$lme, type = "normalized"), plot = FALSE)
ACF <- setNames(data.frame(unclass(ACF)[c("acf", "lag")]), c("ACF","Lag"))
ggplot(ACF, aes(x = Lag, y = ACF)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = Lag, yend = 0))
setwd('~/GIT/maths/tsa_project/another/')
source("script.r")
fd <- derivSimulCI(m1, samples = 10000, n = 200)
CI <- apply(fd[[1]]$simulations, 1, quantile, probs = c(0.025, 0.975))
sigD <- signifD(fd[["Year"]]$deriv, fd[["Year"]]$deriv, CI[2, ], CI[1, ],
eval = 0)
newd <- transform(newd,
derivative = fd[["Year"]]$deriv[, 1], # computed first derivative
fdUpper = CI[2, ],                    # upper CI on first deriv
fdLower = CI[1, ],                    # lower CI on first deriv
increasing = sigD$incr,               # where is curve increasing?
decreasing = sigD$decr)               # ... or decreasing?
ggplot(newd, aes(x = Year, y = derivative)) +
geom_ribbon(aes(ymax = fdUpper, ymin = fdLower), alpha = 0.3, fill = "grey") +
geom_line() +
geom_line(aes(y = increasing), size = 1.5) +
geom_line(aes(y = decreasing), size = 1.5) +
ylab(expression(italic(hat(f) * "'") * (Year))) +
xlab("Year")
xlab("Year")
library("curl")
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.annual_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf, colClasses = rep("numeric", 12))[, 1:2] # only want some of the variables
names(gtemp) <- c("Year", "Temperature")
library("ggplot2")
theme_set(theme_bw())
p1 <- ggplot(gtemp, aes(x = Year, y = Temperature)) +
geom_point()
p1 + geom_line()
library("mgcv")
m1 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 1))
m2 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 2))
anova(m1$lme, m2$lme)
ACF <- acf(resid(m1$lme, type = "normalized"), plot = FALSE)
ACF <- setNames(data.frame(unclass(ACF)[c("acf", "lag")]), c("ACF","Lag"))
ggplot(ACF, aes(x = Lag, y = ACF)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = Lag, yend = 0))
setwd('~/GIT/maths/tsa_project/another/')
source("gamm.r")
set.seed(10)
newd <- with(gtemp, data.frame(Year = seq(min(Year), max(Year), length.out = 200)))
sims <- simulate(m1, nsim = 10000, newdata = newd)
ci <- apply(sims, 1L, quantile, probs = c(0.025, 0.975))
newd <- transform(newd,
fitted = predict(m1$gam, newdata = newd),
lower  = ci[1, ],
upper  = ci[2, ])
p1 + geom_ribbon(data = newd, aes(ymin = lower, ymax = upper, x = Year, y = fitted),
alpha = 0.2, fill = "grey") +
geom_line(data = newd, aes(y = fitted, x = Year))
set.seed(42)
S <- 50
sims2 <- setNames(data.frame(sims[, sample(10000, S)]), paste0("sim", seq_len(S)))
sims2 <- setNames(stack(sims2), c("Temperature", "Simulation"))
sims2 <- transform(sims2, Year = rep(newd$Year, S))
ggplot(sims2, aes(x = Year, y = Temperature, group = Simulation)) +
geom_line(alpha = 0.3)
ggplot(sims2, aes(x = Year, y = Temperature, group = Simulation)) +
geom_line(alpha = 0.5) + xlim(c(1995, 2015)) + ylim(c(0.2, 0.75))
source('script.r')
fd <- derivSimulCI(m1, samples = 10000, n = 200)
CI <- apply(fd[[1]]$simulations, 1, quantile, probs = c(0.025, 0.975))
sigD <- signifD(fd[["Year"]]$deriv, fd[["Year"]]$deriv, CI[2, ], CI[1, ],
eval = 0)
newd <- transform(newd,
derivative = fd[["Year"]]$deriv[, 1], # computed first derivative
fdUpper = CI[2, ],                    # upper CI on first deriv
fdLower = CI[1, ],                    # lower CI on first deriv
increasing = sigD$incr,               # where is curve increasing?
decreasing = sigD$decr)               # ... or decreasing?
ggplot(newd, aes(x = Year, y = derivative)) +
geom_ribbon(aes(ymax = fdUpper, ymin = fdLower), alpha = 0.3, fill = "grey") +
geom_line() +
geom_line(aes(y = increasing), size = 1.5) +
geom_line(aes(y = decreasing), size = 1.5) +
ylab(expression(italic(hat(f) * "'") * (Year))) +
xlab("Year")
set.seed(123)
nsim <- 10000
pauseD <- derivSimulCI(m1, samples = nsim,
newdata = data.frame(Year = seq(1998, 2015, by = 1)))
annSlopes <- setNames(stack(setNames(data.frame(pauseD$Year$simulations),
paste0("sim", seq_len(nsim)))),
c("Derivative", "Simulations"))
annSlopes <- transform(annSlopes, Year = rep(seq(1998, 2015, by = 1), each = nsim))
ggplot(annSlopes, aes(x = Derivative, group = Year)) +
geom_line(stat = "density", trim = TRUE) + facet_wrap(~ Year)
minD <- aggregate(Derivative ~ Year, data = annSlopes, FUN = min)
ggplot(minD, aes(x = Year, y = Derivative)) +
geom_point()
library("viridis")
ggplot(annSlopes, aes(x = Derivative, group = Year, colour = Year)) +
geom_line(stat = "density", trim = TRUE) + scale_color_viridis(option = "magma") +
theme(legend.position = "top", legend.key.width = unit(3, "cm"))
install.packages('viridis')
library("curl")
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.annual_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf, colClasses = rep("numeric", 12))[, 1:2] # only want some of the variables
names(gtemp) <- c("Year", "Temperature")
library("ggplot2")
theme_set(theme_bw())
p1 <- ggplot(gtemp, aes(x = Year, y = Temperature)) +
geom_point()
p1 + geom_line()
library("mgcv")
m1 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 1))
m2 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 2))
anova(m1$lme, m2$lme)
ACF <- acf(resid(m1$lme, type = "normalized"), plot = FALSE)
ACF <- setNames(data.frame(unclass(ACF)[c("acf", "lag")]), c("ACF","Lag"))
ggplot(ACF, aes(x = Lag, y = ACF)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = Lag, yend = 0))
setwd('~/GIT/maths/tsa_project/another/')
source("gamm.r")
set.seed(10)
newd <- with(gtemp, data.frame(Year = seq(min(Year), max(Year), length.out = 200)))
sims <- simulate(m1, nsim = 10000, newdata = newd)
ci <- apply(sims, 1L, quantile, probs = c(0.025, 0.975))
newd <- transform(newd,
fitted = predict(m1$gam, newdata = newd),
lower  = ci[1, ],
upper  = ci[2, ])
p1 + geom_ribbon(data = newd, aes(ymin = lower, ymax = upper, x = Year, y = fitted),
alpha = 0.2, fill = "grey") +
geom_line(data = newd, aes(y = fitted, x = Year))
set.seed(42)
S <- 50
sims2 <- setNames(data.frame(sims[, sample(10000, S)]), paste0("sim", seq_len(S)))
sims2 <- setNames(stack(sims2), c("Temperature", "Simulation"))
sims2 <- transform(sims2, Year = rep(newd$Year, S))
ggplot(sims2, aes(x = Year, y = Temperature, group = Simulation)) +
geom_line(alpha = 0.3)
ggplot(sims2, aes(x = Year, y = Temperature, group = Simulation)) +
geom_line(alpha = 0.5) + xlim(c(1995, 2015)) + ylim(c(0.2, 0.75))
source('script.r')
fd <- derivSimulCI(m1, samples = 10000, n = 200)
CI <- apply(fd[[1]]$simulations, 1, quantile, probs = c(0.025, 0.975))
sigD <- signifD(fd[["Year"]]$deriv, fd[["Year"]]$deriv, CI[2, ], CI[1, ],
eval = 0)
newd <- transform(newd,
derivative = fd[["Year"]]$deriv[, 1], # computed first derivative
fdUpper = CI[2, ],                    # upper CI on first deriv
fdLower = CI[1, ],                    # lower CI on first deriv
increasing = sigD$incr,               # where is curve increasing?
decreasing = sigD$decr)               # ... or decreasing?
ggplot(newd, aes(x = Year, y = derivative)) +
geom_ribbon(aes(ymax = fdUpper, ymin = fdLower), alpha = 0.3, fill = "grey") +
geom_line() +
geom_line(aes(y = increasing), size = 1.5) +
geom_line(aes(y = decreasing), size = 1.5) +
ylab(expression(italic(hat(f) * "'") * (Year))) +
xlab("Year")
set.seed(123)
nsim <- 10000
pauseD <- derivSimulCI(m1, samples = nsim,
newdata = data.frame(Year = seq(1998, 2015, by = 1)))
annSlopes <- setNames(stack(setNames(data.frame(pauseD$Year$simulations),
paste0("sim", seq_len(nsim)))),
c("Derivative", "Simulations"))
annSlopes <- transform(annSlopes, Year = rep(seq(1998, 2015, by = 1), each = nsim))
ggplot(annSlopes, aes(x = Derivative, group = Year)) +
geom_line(stat = "density", trim = TRUE) + facet_wrap(~ Year)
minD <- aggregate(Derivative ~ Year, data = annSlopes, FUN = min)
ggplot(minD, aes(x = Year, y = Derivative)) +
geom_point()
library("viridis")
ggplot(annSlopes, aes(x = Derivative, group = Year, colour = Year)) +
geom_line(stat = "density", trim = TRUE) + scale_color_viridis(option = "magma") +
theme(legend.position = "top", legend.key.width = unit(3, "cm"))
library("curl")
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.annual_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf, colClasses = rep("numeric", 12))[, 1:2] # only want some of the variables
names(gtemp) <- c("Year", "Temperature")
library("ggplot2")
theme_set(theme_bw())
p1 <- ggplot(gtemp, aes(x = Year, y = Temperature)) +
geom_point()
p1 + geom_line()
library("mgcv")
m1 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 1))
m2 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 2))
anova(m1$lme, m2$lme)
ACF <- acf(resid(m1$lme, type = "normalized"), plot = FALSE)
ACF <- setNames(data.frame(unclass(ACF)[c("acf", "lag")]), c("ACF","Lag"))
ggplot(ACF, aes(x = Lag, y = ACF)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = Lag, yend = 0))
setwd('~/GIT/maths/tsa_project/another/')
source("gamm.r")
set.seed(10)
newd <- with(gtemp, data.frame(Year = seq(min(Year), max(Year), length.out = 200)))
sims <- simulate(m1, nsim = 10000, newdata = newd)
ci <- apply(sims, 1L, quantile, probs = c(0.025, 0.975))
newd <- transform(newd,
fitted = predict(m1$gam, newdata = newd),
lower  = ci[1, ],
upper  = ci[2, ])
p1 + geom_ribbon(data = newd, aes(ymin = lower, ymax = upper, x = Year, y = fitted),
alpha = 0.2, fill = "grey") +
geom_line(data = newd, aes(y = fitted, x = Year))
ggplot(ACF, aes(x = Lag, y = ACF)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = Lag, yend = 0))
ACF <- acf(resid(m1$lme, type = "normalized"), plot = FALSE)
ACF <- setNames(data.frame(unclass(ACF)[c("acf", "lag")]), c("ACF","Lag"))
library("mgcv")
m1 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 1))
m2 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 2))
anova(m1$lme, m2$lme)
ACF <- acf(resid(m1$lme, type = "normalized"), plot = FALSE)
ACF <- setNames(data.frame(unclass(ACF)[c("acf", "lag")]), c("ACF","Lag"))
ggplot(ACF, aes(x = Lag, y = ACF)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = Lag, yend = 0))
ggplot(newd, aes(x = Year, y = derivative)) +
geom_ribbon(aes(ymax = fdUpper, ymin = fdLower), alpha = 0.3, fill = "grey") +
geom_line() +
geom_line(aes(y = increasing), size = 1.5) +
geom_line(aes(y = decreasing), size = 1.5) +
ylab(expression(italic(hat(f) * "'") * (Year))) +
xlab("Year")
library("curl")
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.annual_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf, colClasses = rep("numeric", 12))[, 1:2] # only want some of the variables
names(gtemp) <- c("Year", "Temperature")
library("ggplot2")
theme_set(theme_bw())
p1 <- ggplot(gtemp, aes(x = Year, y = Temperature)) +
geom_point()
p1 + geom_line()
library("mgcv")
m1 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 1))
m2 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 2))
anova(m1$lme, m2$lme)
ACF <- acf(resid(m1$lme, type = "normalized"), plot = FALSE)
ACF <- setNames(data.frame(unclass(ACF)[c("acf", "lag")]), c("ACF","Lag"))
ggplot(ACF, aes(x = Lag, y = ACF)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = Lag, yend = 0))
setwd('~/GIT/maths/tsa_project/another/')
source("gamm.r")
set.seed(10)
newd <- with(gtemp, data.frame(Year = seq(min(Year), max(Year), length.out = 200)))
sims <- simulate(m1, nsim = 10000, newdata = newd)
ci <- apply(sims, 1L, quantile, probs = c(0.025, 0.975))
newd <- transform(newd,
fitted = predict(m1$gam, newdata = newd),
lower  = ci[1, ],
upper  = ci[2, ])
p1 + geom_ribbon(data = newd, aes(ymin = lower, ymax = upper, x = Year, y = fitted),
alpha = 0.2, fill = "grey") +
geom_line(data = newd, aes(y = fitted, x = Year))
set.seed(42)
S <- 50
sims2 <- setNames(data.frame(sims[, sample(10000, S)]), paste0("sim", seq_len(S)))
sims2 <- setNames(stack(sims2), c("Temperature", "Simulation"))
sims2 <- transform(sims2, Year = rep(newd$Year, S))
ggplot(sims2, aes(x = Year, y = Temperature, group = Simulation)) +
geom_line(alpha = 0.3)
ggplot(sims2, aes(x = Year, y = Temperature, group = Simulation)) +
geom_line(alpha = 0.5) + xlim(c(1995, 2015)) + ylim(c(0.2, 0.75))
source('script.r')
fd <- derivSimulCI(m1, samples = 10000, n = 200)
CI <- apply(fd[[1]]$simulations, 1, quantile, probs = c(0.025, 0.975))
sigD <- signifD(fd[["Year"]]$deriv, fd[["Year"]]$deriv, CI[2, ], CI[1, ],
eval = 0)
newd <- transform(newd,
derivative = fd[["Year"]]$deriv[, 1], # computed first derivative
fdUpper = CI[2, ],                    # upper CI on first deriv
fdLower = CI[1, ],                    # lower CI on first deriv
increasing = sigD$incr,               # where is curve increasing?
decreasing = sigD$decr)               # ... or decreasing?
ggplot(newd, aes(x = Year, y = derivative)) +
geom_ribbon(aes(ymax = fdUpper, ymin = fdLower), alpha = 0.3, fill = "grey") +
geom_line() +
geom_line(aes(y = increasing), size = 1.5) +
geom_line(aes(y = decreasing), size = 1.5) +
ylab(expression(italic(hat(f) * "'") * (Year))) +
xlab("Year")
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
# myTS.multiple = decompose(myTS, type = "multiplicative")
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
#res = myTS.additive$random
# Route 1
dtemp = diff(myTS.adjusted)
adf.test(dtemp)
auto.arima(dtemp)
arma21.dtemp = arima(dtemp, c(2, 0, 1))
arma24.dtemp = arima(dtemp, c(2, 0, 4))
auto.arima(arma21.dtemp$residuals)
auto.arima(arma24.dtemp$residuals)
my.arma = arma24.dtemp
my.arma
res = my.arma$residuals
Box.test(res, type = 'Ljung-Box')
arch.test(my.arma)
fit1 = my_sGARCH_test(1, 1, 2, 4, dtemp)
fit1
fit1 = my_sGARCH_test(1, 1, 2, 3, dtemp)
fit1
z = as.numeric(residuals(fit) / sigma(fit))
plot.ts(z)
mean(z)
var(z)
length(z)
length(dtemp)
z = as.numeric(residuals(fit1) / sigma(fit1))
plot.ts(z)
mean(z)
var(z)
length(z)
plot.ts(rnorm(2003, 0.03181525, 1.013866))
plot.ts(z)
plot.ts(rnorm(2003, 0.03181525, 1.013866))
plot.ts(rnorm(2003, 0.03181525, 1.013866))
plot.ts(rnorm(2003, 0.03181525, 1.013866))
plot(fit1)
fore1 = ugarchforecast(fit1, n.ahead = 24)
fore.diff = as.numeric(fore1@forecast$seriesFor)
fore.sigma = as.numeric(fore1@forecast$sigmaFor)
ts.predict = temp[length(temp)] + cumsum(fore.diff)
ts.predict = ts.predict + myTS.additive$figure
ts.sigma = sqrt(cumsum(fore.sigma^2))
tsup.sigma = ts.predict + ts.sigma
tsdown.sigma = ts.predict - ts.sigma
plot(1:24, ts.predict, ylim=c(0,1.5), type = 'l', col = 'blue', xlab = "months", ylab = "temperature predict")
lines(1:24, tsup.sigma, type = 'l', col = 'red')
lines(1:24, tsdown.sigma, type = 'l', col = 'red')
plot(fit1)
tail(temp)
tail(gtemp, 10)

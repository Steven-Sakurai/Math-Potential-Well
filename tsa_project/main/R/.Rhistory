library(curl)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
dt = diff(as,numeric(myTS.adjusted))
dt = diff(myTS.adjusted)
??arfima
library(forecast)
m1 = arfima(dt)
m1
res1 = m1$residuals
acf(res1)
plot(m1)
plot.ts(res1)
acf(res1)
forecast(m1)
plot(forecast(m1))
dt = diff(myTS.adjusted)[600:]
dt = diff(myTS.adjusted)[600:2004]
library(forecast)
m1 = arfima(dt)
res1 = m1$residuals
acf(res1)
acf(res1)
res1
tail(res1)
dt = diff(myTS.adjusted)[600:2003]
library(forecast)
m1 = arfima(dt)
res1 = m1$residuals
acf(res1)
library(curl)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
st = diff(myTS.adjusted)
arfima(st)
# large order bad
y = as.numeric(log(myTS.adjusted + 1 - min(myTS.adjusted)))[600:2004]
ty = 1:length(y)
plot.ts(y)
random = y - 3.309e-04*ty - 4.259e-01
plot.ts(random)
which.max(random)
which.min(random)
1396 - 208
1188/1.5
lm(y ~ ty + I(cos((ty - 208)*pi/792)))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/792))))
lines(4.557e-04*ty + 8.294e-02*cos((ty - 208) * pi/792))
plot.ts(y)
lines(4.557e-04*ty + 8.294e-02*cos((ty - 208) * pi/792))
lines(4.557e-04*ty + 8.294e-02*cos((ty - 208) * pi/792) + 3.421e-01)
lm(y ~ ty + I(sin(ty*pi/6)) + I(cos(ty*pi/6)))
summary(lm(y ~ ty + I(sin(ty*pi/6)) + I(cos(ty*pi/6))))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/790))))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/600))))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/200))))
summary(lm(y ~ ty + I(cos((ty - 200)*pi/790))))
summary(lm(y ~ ty + I(cos((ty - 100)*pi/790))))
summary(lm(y ~ ty + I(cos((ty - 200)*pi/790))))
summary(lm(y ~ ty + I(cos((ty - 200)*pi/740))))
lines(4.557e-04*ty + 8.294e-02*cos((ty - 208) * pi/792))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/792))))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/792)) + I(sin((ty - 208)*pi/792))))
lines(3.190e-01 + 4.863e-04*ty + 9.530e-02*cos((ty - 208)*pi/792)+ 1.922e-02*sin((ty - 208)*pi/792))
y = as.numeric(log(myTS.adjusted + 1 - min(myTS.adjusted)))[600:2004]
ty = 1:length(y)
trend = lm(y ~ ty)
tr2 = lm(y ~ ty + I(cos((ty - 208)*pi/792)))
# R^2 > 0.7
# adding I(ty^2) or log(ty^2) wouldn't increase R^2
summary(trend)
summary(tr2)
random = y - 3.309e-04*ty - 4.259e-01
plot.ts(random)
plot.ts(random)

library(curl)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
dt = diff(as,numeric(myTS.adjusted))
dt = diff(myTS.adjusted)
??arfima
library(forecast)
m1 = arfima(dt)
m1
res1 = m1$residuals
acf(res1)
plot(m1)
plot.ts(res1)
acf(res1)
forecast(m1)
plot(forecast(m1))
dt = diff(myTS.adjusted)[600:]
dt = diff(myTS.adjusted)[600:2004]
library(forecast)
m1 = arfima(dt)
res1 = m1$residuals
acf(res1)
acf(res1)
res1
tail(res1)
dt = diff(myTS.adjusted)[600:2003]
library(forecast)
m1 = arfima(dt)
res1 = m1$residuals
acf(res1)
library(curl)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
st = diff(myTS.adjusted)
arfima(st)
# large order bad
y = as.numeric(log(myTS.adjusted + 1 - min(myTS.adjusted)))[600:2004]
ty = 1:length(y)
plot.ts(y)
random = y - 3.309e-04*ty - 4.259e-01
plot.ts(random)
which.max(random)
which.min(random)
1396 - 208
1188/1.5
lm(y ~ ty + I(cos((ty - 208)*pi/792)))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/792))))
lines(4.557e-04*ty + 8.294e-02*cos((ty - 208) * pi/792))
plot.ts(y)
lines(4.557e-04*ty + 8.294e-02*cos((ty - 208) * pi/792))
lines(4.557e-04*ty + 8.294e-02*cos((ty - 208) * pi/792) + 3.421e-01)
lm(y ~ ty + I(sin(ty*pi/6)) + I(cos(ty*pi/6)))
summary(lm(y ~ ty + I(sin(ty*pi/6)) + I(cos(ty*pi/6))))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/790))))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/600))))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/200))))
summary(lm(y ~ ty + I(cos((ty - 200)*pi/790))))
summary(lm(y ~ ty + I(cos((ty - 100)*pi/790))))
summary(lm(y ~ ty + I(cos((ty - 200)*pi/790))))
summary(lm(y ~ ty + I(cos((ty - 200)*pi/740))))
lines(4.557e-04*ty + 8.294e-02*cos((ty - 208) * pi/792))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/792))))
summary(lm(y ~ ty + I(cos((ty - 208)*pi/792)) + I(sin((ty - 208)*pi/792))))
lines(3.190e-01 + 4.863e-04*ty + 9.530e-02*cos((ty - 208)*pi/792)+ 1.922e-02*sin((ty - 208)*pi/792))
y = as.numeric(log(myTS.adjusted + 1 - min(myTS.adjusted)))[600:2004]
ty = 1:length(y)
trend = lm(y ~ ty)
tr2 = lm(y ~ ty + I(cos((ty - 208)*pi/792)))
# R^2 > 0.7
# adding I(ty^2) or log(ty^2) wouldn't increase R^2
summary(trend)
summary(tr2)
random = y - 3.309e-04*ty - 4.259e-01
plot.ts(random)
plot.ts(random)
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
# myTS.multiple = decompose(myTS, type = "multiplicative")
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
auto.arima(myTS.adjusted)
library(car)
install.packages('car')
library(car)
my.ts = powerTransform(myTS.adjusted)
?powerTransform
powerTransform(myTS.adjusted)
arima1 = arima(myTS.adjusted, c(2, 0, 1))
auto.arima(arima1$residuals)
arima2 = arima(myTS.adjusted, c(2, 1, 4))
auto.arima(arima2$residuals)
arima1 = arima(myTS.adjusted, c(2, 0, 1), include.mean = TRUE)
arima2 = arima(myTS.adjusted, c(2, 1, 4), include.mean = TRUE)
auto.arima(arima2$residuals)
arima1 = arima(myTS.adjusted, c(2, 0, 1))
arima2 = arima(myTS.adjusted, c(2, 1, 4))
acf(arima1$residuals)
acf(arima2$residuals)
acf(arima1$residuals)
setpar <- function(i1, i2)
{
par(mfrow=c(i1, i2))
}
setpar(2, 1)
acf(arima1$residuals)
acf(arima2$residuals)
myTS.adjusted = as.numeirc(myTS.adjusted)
myTS.adjusted = as.numeric(myTS.adjusted)
arima1 = arima(myTS.adjusted, c(2, 0, 1))
arima2 = arima(myTS.adjusted, c(2, 1, 4))
acf(arima1$residuals)
acf(arima2$residuals)
plot(forecast(arima2))
?forecast
forecast.Arima(arima2)
forecast.Arima(arima2, h = 24, level=c(80, 95))
arima2 = Arima(myTS.adjusted, c(2, 1, 4))
forecast.Arima(arima2, h = 24, level=c(80, 95))
plot(forecast.Arima(arima2, h = 24, level=c(80, 95)))
setpar(1, 1)
plot(forecast.Arima(arima2, h = 24, level=c(80, 95)))
plot(forecast.Arima(arima2, h = 240, level=c(80, 95)))
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(2, 4), include.mean = TRUE, arfima = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=diff(my.temp), solver="solnp")
my.temp = as.numeric(myTS.adjusted)
myfit=ugarchfit(myspec,data=diff(my.temp), solver="solnp")
myfit=ugarchfit(myspec,data=diff(my.temp))
library(rugarch)
library(zoo)
myfit=ugarchfit(myspec,data=diff(my.temp))
install.packages(c("jsonlite", "tibble", "tseries"))
install.packages(c("foreign", "Matrix"), lib="/usr/local/Cellar/r/3.4.0_1/R.framework/Versions/3.4/Resources/library")
install.packages(c("jsonlite", "tibble", "tseries"))
install.packages(c("jsonlite", "tibble", "tseries"))
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
# myTS.multiple = decompose(myTS, type = "multiplicative")
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
my.temp = as.numeric(myTS.adjusted)
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(2, 4), include.mean = TRUE, arfima = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=diff(my.temp))
print(myfit)
myfit=ugarchfit(myspec,data=diff(my.temp), fit.control=list(scale=TRUE))
myfit
my.temp = as.numeric(myTS.adjusted)
dtemp = diff(my.temp)
stddtemp = (dtemp - mean(dtemp))/var(dtemp)
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(2, 4), include.mean = TRUE, arfima = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=stddtemp, fit.control=list(scale=TRUE))
plot.ts(stddtemp)
length(stddtemp)
my.temp = as.numeric(myTS.adjusted)
dtemp = diff(my.temp)
stddtemp = (dtemp - mean(dtemp))/var(dtemp)
stddtemp = stddtemp[500:length(stddtemp)]
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(2, 4), include.mean = TRUE, arfima = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=stddtemp, fit.control=list(scale=TRUE))
my.temp = as.numeric(myTS.adjusted)
dtemp = diff(my.temp)
stddtemp = (dtemp - mean(dtemp))/var(dtemp)
s = stddtemp[500:length(stddtemp)]
plot.ts(s)
arfima(s)
my.temp = as.numeric(myTS.adjusted)
dtemp = diff(my.temp)
stddtemp = (dtemp - mean(dtemp))/var(dtemp)
s = stddtemp[500:length(stddtemp)]
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(2, 4), include.mean = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myfit
my.temp = as.numeric(myTS.adjusted)
dtemp = diff(my.temp)
stddtemp = (dtemp - mean(dtemp))/var(dtemp)
s = stddtemp[500:length(stddtemp)]
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(1, 1), include.mean = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myfit
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(1, 1), include.mean = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(1, 1), include.mean = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(2, 1), include.mean = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myfit
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(1, 2), include.mean = FALSE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myfit
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)), mean.model = list(armaOrder = c(1, 1), include.mean = FALSE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myfit
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(1, 1), include.mean = FALSE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myfit
acf(myfit@fit$residuals)
plot(myfit)
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(1, 0), include.mean = FALSE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myfit
plot(myfit)
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(2, 0), include.mean = FALSE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
acf(myfit@fit$residuals)
myfit
plot(myfit)
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), mean.model = list(armaOrder = c(1, 0), include.mean = FALSE, arfima = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)), mean.model = list(armaOrder = c(1, 0), include.mean = FALSE, arfima = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
install.packages("Matrix", lib="/usr/local/Cellar/r/3.4.0_1/R.framework/Versions/3.4/Resources/library")
my.temp = as.numeric(myTS.adjusted)
dtemp = diff(my.temp)
stddtemp = (dtemp - mean(dtemp))/var(dtemp)
s = stddtemp[500:length(stddtemp)]
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)), mean.model = list(armaOrder = c(1, 0), include.mean = FALSE, arfima = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=s, fit.control=list(scale=TRUE))
acf(myfit@fit$residuals)
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
gtemp = as.numeric(gtemp$V2)
length(gtemp)
# take only a part of it
mytemp =  gtemp[600:1980]
plot.ts(mytemp)
acf(mytemp)
pacf(mytemp)
auto.arima(mytemp, seasonal = TRUE)
acf(mytemp)
m1 = auto.arima(mytemp, seasonal = TRUE)
acf(residuals(m1))
m2 = arima(mytemp, order = c(3, 1, 1), seasonal = list(c(2, 0, 0), period = 12))
m2 = arima(mytemp, order = c(3, 1, 1), seasonal = list(order = c(2, 0, 0), period = 12))
m2
m2 = arima(mytemp, order = c(3, 1, 1), seasonal = list(order = c(2, 0, 0), fixed = c(0, NA), period = 12))
m2
m2 = arima(mytemp, order = c(3, 1, 1), seasonal = list(order = c(1, 0, 0), period = 24))
m2
acf(residuals(m2))
m2 = arima(mytemp, order = c(3, 1, 1), seasonal = list(order = c(1, 0, 1), period = 24))
m2
acf(residuals(m2))
pacf(residuals(m2))
?arfima
?ArchTest
?Arch.Test
?FinTS
??FinTS
library(FinTS)
ArchTest(residuals(m2))
ArchTest(residuals(m1))
m3 = arfima(mytemp, order = c(3, 1, 1), seasonal = list(order = c(1, 0, 1), period = 24))
m3 = arfima(mytemp)
m3
res3 = residuals(m3)
acf(res3)
pacf(res3)
arima(res3, seasonal = list(order = c(1, 0, 1), period = 24))
res4 = arima(res3, seasonal = list(order = c(1, 0, 1), period = 24))
acf(res4)
res4 = residuals(arima(res3, seasonal = list(order = c(1, 0, 1), period = 24)))
acf(res4)
plot.ts(mytemp)
m5 = arfima(mytemp, seasonal = list(order = c(1, 0, 1), period = 24))
m5 = arfima(mytemp, seasonal = list(order = c(24, 0, 24), period = 24))
m5 = arfima(mytemp, order = c(2, 0.5, 1), seasonal = list(order = c(1, 0, 1), period = 24))
m5 = arfima(mytemp, order = c(2, 0.5, 1), seasonal = list(period = 24))
m5 = arfima(mytemp, seasonal = TRUE)
m5
?arfima
atemp = diff(mytemp, lag = 24)
auto.arima(atemp)
atemp = diff(mytemp, lag = 24)
m5 = auto.arima(atemp)
res5 = residuals(m5)
acf(res5)
pacf(res5)
gtemp = as.numeric(gtemp$V2)
mytemp =  gtemp[600:1980]
plot.ts(mytemp)
acf(mytemp)
pacf(mytemp)
m1 = auto.arima(mytemp, seasonal = TRUE)
m2 = arima(mytemp, order = c(3, 1, 1), seasonal = list(order = c(1, 0, 1), period = 24))
m3 = arfima(mytemp)
res3 = residuals(m3)
res4 = residuals(arima(res3, seasonal = list(order = c(1, 0, 1), period = 24)))
acf(res4)
gtemp = as.numeric(gtemp$V2)
mytemp =  gtemp[600:1980]
plot.ts(mytemp)
acf(mytemp)
pacf(mytemp)
m1 = auto.arima(mytemp, seasonal = TRUE)
m2 = arima(mytemp, order = c(3, 1, 1), seasonal = list(order = c(1, 0, 1), period = 24))
m3 = arfima(mytemp)
res3 = residuals(m3)
res4 = residuals(arima(res3, seasonal = list(order = c(1, 0, 1), period = 24)))
pacf(mytemp)
acf(mytemp)
pacf(mytemp)
m1
m2
m3
res2 = residuals(m2)
acf(res2)
m3 = arfima(mytemp)
res3 = residuals(m3)
acf(res3)
res4 = residuals(arima(res3, seasonal = list(order = c(1, 0, 1), period = 24)))
acf(res4)
atemp = diff(mytemp, lag = 24)
m5 = auto.arima(atemp)
res5 = residuals(m5)
acf(res5)

library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
# myTS.multiple = decompose(myTS, type = "multiplicative")
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
#res = myTS.additive$random
# Route 1
dtemp = diff(myTS.adjusted)
adf.test(dtemp)
auto.arima(dtemp)
arma21.dtemp = arima(dtemp, c(2, 0, 1))
arma24.dtemp = arima(dtemp, c(2, 0, 4))
auto.arima(arma21.dtemp$residuals)
auto.arima(arma24.dtemp$residuals)
my.arma = arma24.dtemp
my.arma
res = my.arma$residuals
Box.test(res, type = 'Ljung-Box')
arch.test(my.arma)
my_sGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
my_eGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
efit = my_eGARCH_test(1, 1, 2, 3, myTS.adjusted)
efit
?ugarchfit
plot(efit)
efit = my_eGARCH_test(1, 1, 2, 3, dtemp)
efit
efit = my_eGARCH_test(0, 1, 2, 3, dtemp)
efit
another_sGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE, arfima = TRUE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
afit = another_sGARCH_test(1, 1, 2, 3, dtemp)
afit
another_sGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = TRUE, arfima = TRUE), distribution.model = "student")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
afit = another_sGARCH_test(1, 1, 2, 3, dtemp)
another_sGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = TRUE, arfima = TRUE), distribution.model = "normal")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
afit = another_sGARCH_test(1, 1, 2, 3, dtemp)
efit = my_eGARCH_test(2, 2, 2, 3, dtemp)
efit
efit = my_eGARCH_test(0, 2, 2, 3, dtemp)
efit
efit = my_eGARCH_test(2, 0, 2, 3, dtemp)
efit = my_eGARCH_test(2, 0, 2, 3, dtemp)
efit
dtemp = diff(myTS.adjusted)
adf.test(dtemp)
tseries::adf.test(dtemp)
my.arma
Box.test(res, type = 'Ljung-Box')
arch.test(my.arma)
plot.ts(temp)
tseries::adf.test(temp)
tseries::adf.test(temp,lag=20)
?adf.test
tseries::adf.test(temp,k=20)
?ur.df
??ur.df
install.packages('urca')
library(urca)
ur.df(temp)
?adf.test
tseries::adf.test(temp, alternative = "explosive")
t = 1:2004
lm(temp ~ t + I(t^2))
summary(lm(temp ~ t + I(t^2)))
summary(lm(temp ~ t))
summary(lm(temp ~ t + I(t^2) + I(t^3)))
summary(lm(temp ~ t + I(t^2)))
tmodel = lm(temp ~ t + I(t^2))
coef = tmodel$coefficients
coef
detrend = temp - coef[1] * t - coef[2]*t^2
plot.ts(detrend)
detrend = temp
plot.ts(detrend)
detrend = temp - (-3.121876e-04*t)
plot.ts(detrend)
t
length(temp)
length(t)
t*coef[1]
temp - t*coef[1] - t^2 * coef[2]
plot.ts(temp - t*coef[1] - t^2 * coef[2])
plot.ts(temp + t*coef[1] + t^2 * coef[2])
plot.ts(t*coef[1] + t^2 * coef[2])
plot.ts(temp)
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
# myTS.multiple = decompose(myTS, type = "multiplicative")
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
#res = myTS.additive$random
# Route 1
dtemp = diff(myTS.adjusted)
adf.test(dtemp)
auto.arima(dtemp)
arma21.dtemp = arima(dtemp, c(2, 0, 1))
arma24.dtemp = arima(dtemp, c(2, 0, 4))
auto.arima(arma21.dtemp$residuals)
auto.arima(arma24.dtemp$residuals)
my.arma = arma24.dtemp
my.arma
res = my.arma$residuals
Box.test(res, type = 'Ljung-Box')
arch.test(my.arma)
fit1 = my_sGARCH_test(1, 1, 2, 3, dtemp)
z = as.numeric(residuals(fit1) / sigma(fit1))
acf(z)
library(fracdiff)
fdGPH(z)
longz = diffseries(z, -0.03199076)
acf(longz)
lm(temp ~ t)
summary(lm(temp ~ t))
summary(lm(temp ~ t + I(t^2)))
trend.model = lm(temp ~ t + I(t^2))
trend.model
det = temp + 3.122e-04 * t - 3.640e-07 * t^2
plot.ts(det)
auto.arima(det)
my_sGARCH_test(1, 1, 4, 2, det)
my_sGARCH_test(1, 1, 3, 2, det)
my_sGARCH_test(2, 2, 3, 2, det)
my_sGARCH_test(1, 2, 3, 2, det)
502/12
12 * 47
12 * 40
atemp = atemp[480:2004]
atemp = temp[480:2004]
atemp = temp[480:2004]
trend.model = lm(atemp ~ t + I(t^2))
atemp = temp[480:2004]
t = 480:2004
trend.model = lm(atemp ~ t + I(t^2))
trend.model
summary(trend.model)
det = temp + 2.280e-04 * t - 3.370e-07 * t^2
det = atemp + 2.280e-04 * t - 3.370e-07 * t^2
plot.ts(atemp)
trend.model
plot.ts(det)
auto.arima(det)
acf(det)
library(fracdiff)
??detectAO
detectAO(temp)
detectAO(dtemp)
std_eGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
std_eGARCH_test(1, 1, 2, 3, dtemp)
std_eGARCH_test(0, 1, 2, 3, dtemp)
std_eGARCH_test(0, 1, 0, 3, dtemp)
std_eGARCH_test(2, 2, 2, 4, dtemp)
std_eGARCH_test(2, 2, 2, 3, dtemp)
std_eGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
std_eGARCH_test(1, 1, 2, 3, dtemp)
std_eGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "std")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
std_eGARCH_test(1, 1, 2, 3, dtemp)
stdmodel = std_eGARCH_test(1, 1, 2, 3, dtemp)
plot(stdmodel)
stdmodel1 = std_eGARCH_test(1, 1, 1, 0, dtemp)
stdmodel1
plot(stdmodel1)
std_eGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE, arfima = TRUE, distribution.model = "std")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
std_eGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE, arfima = TRUE, distribution.model = "std")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
std_eGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE, arfima = TRUE), distribution.model = "std")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
stdmodel = std_eGARCH_test(1, 1, 2, 3, dtemp)
plot(stdmodel1)
autoarfima(temp)
temp = gtemp$V2[1:2004]
autoarfima(temp)
?autoarfima
autoarfima(temp, arfima = TRUE)
autoarfima(as.numeric(temp), arfima = TRUE)
install.packages('farma')
install.packages('fArma')
?fArma
??fArma
atemp = temp[480:2004]
d2temp = diff(atemp)
std_eGARCH_test(1, 1, 2, 3, d2temp)
std_sGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "std")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
std_eGARCH_test(1, 1, 2, 3, d2temp)
std_sGARCH_test(1, 1, 2, 3, d2temp)
library("curl")
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.annual_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf, colClasses = rep("numeric", 12))[, 1:2] # only want some of the variables
names(gtemp) <- c("Year", "Temperature")
library("ggplot2")
theme_set(theme_bw())
p1 <- ggplot(gtemp, aes(x = Year, y = Temperature)) +
geom_point()
p1 + geom_line()
library("mgcv")
m1 <- gamm(Temperature ~ s(Year), data = gtemp, correlation = corARMA(form = ~ Year, p = 1))
m1
m1$lme

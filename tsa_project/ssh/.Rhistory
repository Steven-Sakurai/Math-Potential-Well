library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
my_sGARCH_test <- function(p, q, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
my_arch_test <- function(p, q, ts.data)
{
std.gres = my_sGARCH_test(p, q, ts.data)@fit$z
return(arch.test(arima(std.gres, c(0, 0, 0))))
}
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = decompose(ts(as.numeric(temp), frequency = 12))
# seems that inside decompose return value:
# x(original) = seasonal(figure) + trend + random(residuals)
res = myTS$random
armaModel = auto.arima(res)
armaModel
head(res, 10)
tail(res, 10)
length(res)
res = myTS$random[7:1998]
length(res)
armaModel = auto.arima(res)
armaModel
my_sGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = TRUE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
fit1 = my_sGARCH_test(1, 1, 1, 2, res)
library(rugarch)
install.packages(rugarch)
install.packages('rugarch')

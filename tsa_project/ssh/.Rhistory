library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
my_sGARCH_test <- function(p, q, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
my_arch_test <- function(p, q, ts.data)
{
std.gres = my_sGARCH_test(p, q, ts.data)@fit$z
return(arch.test(arima(std.gres, c(0, 0, 0))))
}
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = decompose(ts(as.numeric(temp), frequency = 12))
# seems that inside decompose return value:
# x(original) = seasonal(figure) + trend + random(residuals)
res = myTS$random
armaModel = auto.arima(res)
armaModel
head(res, 10)
tail(res, 10)
length(res)
res = myTS$random[7:1998]
length(res)
armaModel = auto.arima(res)
armaModel
my_sGARCH_test <- function(p, q, m, n, ts.data)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = TRUE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
fit1 = my_sGARCH_test(1, 1, 1, 2, res)
library(rugarch)
install.packages(rugarch)
install.packages('rugarch')
setpar <- function(i1, i2)
{
par(mfrow=c(i1, i2))
}
?decompose
?ts
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
my_sGARCH_test <- function(p, q, m, n, ts.data = res)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
my_arch_test <- function(p, q, ts.data)
{
std.gres = my_sGARCH_test(p, q, ts.data)@fit$z
return(arch.test(arima(std.gres, c(0, 0, 0))))
}
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = decompose(ts(as.numeric(temp), start = c(1850, 1)frequency = 12))
myTS = decompose(ts(as.numeric(temp), start = c(1850, 1), frequency = 12))
print(myTS)
?decompose
myTS2 = decompose(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), type = 'multiplcative')
myTS2 = decompose(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), type = "multiplcative")
myTS2 = decompose(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), type = “multiplicative”)
myTS2 = decompose(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), type = "multiplicative")
myTS2$seasonal
setpar(4, 1)
plot.ts(myTS2$x)
plot.ts(myTS2$seasonal)
plot.ts(myTS2$trend)
plot.ts(myTS2$random)
setpar(myTS2$random)
setpar(1, 1)
plot(myTS2$random)
fit = stl(ts(as.numeric(temp), start = c(1850, 1), frequency = 12))
fit = stl(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), s.window = 'periodic')
plot(fit)
fit = stl(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), s.window = 'periodic', t.window = 10)
plot(fit)
fit = stl(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), s.window = 'periodic', t.window = 100)
plot(fit)
fit = stl(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), s.window = 'periodic', t.window = 1000)
plot(fit)
install.packages('nortest')
library(nortest)
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
my_sGARCH_test <- function(p, q, m, n, ts.data = res)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
my_arch_test <- function(p, q, ts.data)
{
std.gres = my_sGARCH_test(p, q, ts.data)@fit$z
return(arch.test(arima(std.gres, c(0, 0, 0))))
}
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = decompose(ts(as.numeric(temp), start = c(1850, 1), frequency = 12))
myTS2 = decompose(ts(as.numeric(temp), start = c(1850, 1), frequency = 12), type = "multiplicative")
# seems that inside decompose return value:
# x(original) = seasonal(figure) + trend + random(residuals)
res = myTS$random[7:1998]
fit = my_sGARCH_test(1, 1, 1, 2, res)
fit
z = fit@fit$z
ad.test(z)
kurtosis.norm..test(z)
??kurtosis.norm..test
??kurtosis
library(vars)
normality.test(z)
normality.test(vec2var(z))
?VAR
z.var = VAR(z, p = 0)
ar(z)
install.packages("normtest")
library(normtest)
kurtosis.norm.test(z)
?kurtosis.norm.test
kurtosis.norm.test(rnorm(1000))
skewness.norm.test(z)
skewness.norm.test(rnorm(1000))
?nortest
?HoltWinters
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
my_sGARCH_test <- function(p, q, m, n, ts.data = res)
{
myspec=ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)), mean.model = list(armaOrder = c(m, n), include.mean = FALSE), distribution.model = "norm")
myfit=ugarchfit(myspec,data=ts.data, solver="solnp")
# extracting from fit result
return(myfit)
}
my_arch_test <- function(p, q, ts.data)
{
std.gres = my_sGARCH_test(p, q, ts.data)@fit$z
return(arch.test(arima(std.gres, c(0, 0, 0))))
}
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
plot.ts(myTS)
setpar(4, 1)
myTS.mutiple = decompose(myTS, type = "multiplicative")
myTS.multiple = decompose(myTS, type = "multiplicative")
plot.ts(myTS.multiple$x)
plot.ts(myTS.multiple$seasonal)
plot.ts(myTS.multiple$x)
setpar(4, 1)
plot.ts(myTS.multiple$x)
plot.ts(myTS.multiple$figure)
plot.ts(myTS.multiple$trend)
plot.ts(myTS.multiple$random)
fore = ugarchforecast(fit)
plot(fit)
plot(fore)
plot(fore)
setpar(1, 1)
plot(fore)
library(fracdiff)
?fracdiff
d = fdGPH(dtemp)
library(curl)
library(forecast)
library(TSA)
library(aTSA)
library(rugarch)
tmpf <- tempfile()
curl_download("http://www.metoffice.gov.uk/hadobs/hadcrut4/data/current/time_series/HadCRUT.4.5.0.0.monthly_ns_avg.txt", tmpf)
gtemp <- read.table(tmpf)[, 1:2]
temp = gtemp$V2[1:2004]
#de-seasonal
myTS = ts(as.numeric(temp), start = c(1850, 1), frequency = 12)
myTS.additive = decompose(myTS)
# myTS.multiple = decompose(myTS, type = "multiplicative")
myTS.adjusted = myTS.additive$x - myTS.additive$seasonal
res = myTS.additive$random
dtemp = diff(myTS.adjusted)
d = fdGPH(dtemp)
d
d = fdGPH(myTS.adjusted)
d
diff.dtemp = diffseries(myTS.adjusted, d = 0.8925434)
diff.dtemp
plot.ts(diff.dtemp)
auto.arima(diff.dtemp)
myTS.adjusted - diffseries(diff.dtemp d = -0.8925434)
myTS.adjusted - diffseries(diff.dtemp, d = -0.8925434)
library(fracdiff)
d = fdGPH(myTS.adjusted)
diff.dtemp = diffseries(myTS.adjusted, d = 0.8925434)
myTS.adjusted - diffseries(diff.dtemp, d = -0.8925434)
plot.ts(diff.dtemp)
auto.arima(diff.dtemp)
arma10.m = arima(diff.temp, c(1, 0, 0))
d = fdGPH(myTS.adjusted)
diff.temp = diffseries(myTS.adjusted, d = 0.8925434)
plot.ts(diff.temp)
auto.arima(diff.temp)
arma10.m = arima(diff.temp, c(1, 0, 0))
auto.arima(arma10.m$residuals)
arma22.m = arima(diff.temp, c(2, 0, 2))
auto.arima(arma22.m$residuals)
fit2 = my_sGARCH_test(1, 1, 1, 0, diff.temp)
fit2
z2 = fit2@fit$z
acf(z2)
diff.temp = diffseries(myTS.adjusted, d = 0.8925434)
fit2 = my_sGARCH_test(1, 1, 2, 2, diff.temp)
z2 = fit2@fit$z
acf(z2)
fit2 = my_sGARCH_test(2, 2, 2, 2, diff.temp)
z2 = fit2@fit$z
acf(z2)
fdGPH(z2)
auto.arima(myTS.adjusted)
t = 1:2004
lm(temp ~ t)
plot.ts(temp - 0.0004177 * t)
t2 = temp - 0.0004177 * t
plot.ts(t2)
mean(t2)
var(t2)
t2 = (t2 - mean(t2))/sqrt(var(t2))
t2 = (t2 - mean(t2))/sqrt(var(t2))
plot.ts(t2)
auto.arima(t2)
auto.arima(diff(t2))
plot.ts(auto.arima(diff(t2))$residuals)
d = fdGPH(t2)
d
lm(temp ~ t)
t2 = temp - 0.0004177 * t
plot.ts(t2)
t2 = (t2 - mean(t2))/sqrt(var(t2))
plot.ts(t2)
d = fdGPH(t2)
diff.temp = diffseries(t2, d = 0.5057782)
plot.ts(diff.temp)
auto.arima(diff.temp)
acf(diff.temp)
a = fdGPH(diff.temp)
a
a = fdGPH(a, -0.01662623)
a
acf(a)
a
str(a)
diff.temp = diffseries(t2, d$d)
lm(temp ~ t)
t2 = temp - 0.0004177 * t
plot.ts(t2)
t2 = (t2 - mean(t2))/sqrt(var(t2))
plot.ts(t2)
d = fdGPH(t2)
tmp = diffseries(t2, d$d)
diff.temp = diffseries(tmp, fdGPH(tmp)$d)
plot.ts(diff.temp)
acf(diff.temp)
auto.arima(t2)
lm(temp ~ e^t)
lm(temp ~ t + t^2)
lm(temp ~ t + I(t^2))
md = lm(temp ~ t + I(t^2))
md
md$coefficients
md$coefficients[1]
md = lm(temp ~ t + I(t^2))
t2 = temp - md$coefficients[2] * t - md$coefficients[3] * t^2
auto.arima(t2)
t = as.numeric(1:2004)
md = lm(temp ~ t + I(t^2))
t2 = temp - md$coefficients[2] * t - md$coefficients[3] * t^2
auto.arima(t2)
t2 = temp - md$coefficients[2] * t - md$coefficients[3] * t^2
t2
tail(t2)
auto.arima(t2)
my_sGARCH_test(1, 1, 4, 2, t2)
res2 = arima(t2, c(4, 0, 2))
fdGPH(res2)
res2
res2 = arima(t2, c(4, 0, 2))$residuals
fdGPH(res2)
res2 = diffseries(res2, 0.02900248)
acf(res2)
my_sGARCH_test(1, 1, 0, 0, res2)
z2 = my_sGARCH_test(1, 1, 0, 0, res2)$z
z2 = my_sGARCH_test(1, 1, 0, 0, res2)@fit$z
acf(z2)
